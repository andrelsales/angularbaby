Additional Stuff: 

Http: https://angular.io/docs/ts/latest/guide/server-communication.html
Lifecycle hooks: https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html
Pipes: https://angular.io/docs/ts/latest/guide/pipes.html
Router: https://angular.io/docs/ts/latest/guide/router.html
Angular Modules: https://angular.io/docs/ts/latest/guide/ngmodule.html

Live Example: https://angular.io/resources/live-examples/displaying-data/ts/eplnkr.html

Angular QuickStart

1 Whats Angular 2?

- Angular applications are made up of components. A component is the combination of an HTML template and a component class that controls a portion of the screen

import { Component } from '@angular/core';

@Component({
  selector: 'my-app',
  template: `<h1>Hello {{name}}</h1>`
})
export class AppComponent { name = 'Angular'; }

<my-app>Loading AppComponent content here ...</my-app>

2 Set Up for local development (https://angular.io/docs/ts/latest/guide/setup.html)

- Create a project folder (you can call it quickstart and rename it later).
- Clone or download the QuickStart seed into your project folder.
- Install npm packages.
- Run npm start to launch the sample application.

>>>> Focus on the following three TypeScript (.ts) files in the /src folder.
app/app.component.ts: Root component, which will become a tree of nested components
app/app.module.ts: Defines AppModule, the root module that tells Angular how to assemble the application
main.ts: Compiles the application with the JIT compiler and bootstraps the application's main module (AppModule) to run in the browser.

3 Learning Angular (https://angular.io/docs/ts/latest/guide/learning-angular.html)

4 Architecture

4.1 Introduction

- You write Angular applications by composing HTML templates with Angularized markup, writing component classes to manage those templates, adding application logic in services, and boxing components and services in modules

- Then you launch the app by bootstrapping the root module. Angular takes over, presenting your application content in a browser and responding to user interactions according to the instructions you've provided.

4.2 Angular Main Building Blocks

- Modules
- Components
- Templates
- Metadata
- Data binding
- Directives
- Services
- Dependency injection

4.2.1 Modules

- Angular apps are modular
- Every Angular app has at least one Angular module class, the root module, conventionally named AppModule.
- While the root module may be the only module in a small application, most apps have many more feature modules, each a cohesive block of code dedicated to an application domain, a workflow, or a closely related set of capabilities. 
- An Angular module, whether a root or feature, is a class with an @NgModule decorator.

NgModule is a decorator function that takes a single metadata object whose properties describe the module. The most important properties are:

    declarations - the view classes that belong to this module. Angular has three kinds of view classes: components, directives, and pipes.
    exports - the subset of declarations that should be visible and usable in the component templates of other modules.
    imports - other modules whose exported classes are needed by component templates declared in this module.
    providers - creators of services that this module contributes to the global collection of services; they become accessible in all parts of the app.
    bootstrap - the main application view, called the root component, that hosts all other app views. Only the root module should set this bootstrap property.

src/app/app.module.ts:

import { NgModule }      from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
@NgModule({
  imports:      [ BrowserModule ],
  providers:    [ Logger ],
  declarations: [ AppComponent ],
  exports:      [ AppComponent ],
  bootstrap:    [ AppComponent ]
})
export class AppModule { }

4.2.2 Components

- A component controls a patch of screen called a view.

export class HeroListComponent implements OnInit {
  heroes: Hero[];
  selectedHero: Hero;

  constructor(private service: HeroService) { }

  ngOnInit() {
    this.heroes = this.service.getHeroes();
  }

  selectHero(hero: Hero) { this.selectedHero = hero; }
}

- Angular creates, updates, and destroys components as the user moves through the application. Your app can take action at each moment in this lifecycle through optional lifecycle hooks, like ngOnInit() declared above.

4.2.3 Templates

- You define a component's view with its companion template. A template is a form of HTML that tells Angular how to render the component.

    <h2>Hero List</h2>
    <p><i>Pick a hero from the list</i></p>
    <ul>
      <li *ngFor="let hero of heroes" (click)="selectHero(hero)">
        {{hero.name}}
      </li>
    </ul>
    <hero-detail *ngIf="selectedHero" [hero]="selectedHero"></hero-detail>

4.2.4 Metadata

- Metadata tells Angular how to process a class.

@Component({
  selector:    'hero-list',
  templateUrl: './hero-list.component.html',
  providers:  [ HeroService ]
})
export class HeroListComponent implements OnInit {
/* . . . */
}

4.2.5 Data Binding

- Angular supports data binding, a mechanism for coordinating parts of a template with parts of a component. Add binding markup to the template HTML to tell Angular how to connect both sides.

<li>{{hero.name}}</li>
<hero-detail [hero]="selectedHero"></hero-detail>
<li (click)="selectHero(hero)"></li>

- The {{hero.name}} interpolation displays the component's hero.name property value within the <li> element.
- The [hero] property binding passes the value of selectedHero from the parent HeroListComponent to the hero property of the child HeroDetailComponent.
- The (click) event binding calls the component's selectHero method when the user clicks a hero's name.

- Two-way data binding is an important fourth form that combines property and event binding in a single notation, using the ngModel directive. Here's an example from the HeroDetailComponent template:

<input [(ngModel)]="hero.name">

- In two-way binding, a data property value flows to the input box from the component as with property binding. The user's changes also flow back to the component, resetting the property to the latest value, as with event binding.

- Data binding plays an important role in communication between a template and its component.
- Data binding is also important for communication between parent and child components.

4.2.6 Directives

- Angular templates are dynamic. When Angular renders them, it transforms the DOM according to the instructions given by directives.

- Two other kinds of directives exist: structural and attribute directives.

- Structural directives alter layout by adding, removing, and replacing elements in DOM.
<li *ngFor="let hero of heroes"></li>

- Attribute directives alter the appearance or behavior of an existing element.
<input [(ngModel)]="hero.name">

4.2.7 Services 

- Almost anything can be a service. A service is typically a class with a narrow, well-defined purpose. It should do something specific and do it well.

export class HeroService {
  private heroes: Hero[] = [];

  constructor(
    private backend: BackendService,
    private logger: Logger) { }

  getHeroes() {
    this.backend.getAll(Hero).then( (heroes: Hero[]) => {
      this.logger.log(`Fetched ${heroes.length} heroes.`);
      this.heroes.push(...heroes); // fill cache
    });
    return this.heroes;
  }
}

- Component classes don't fetch data from the server, validate user input, or log directly to the console. They delegate such tasks to services.

4.2.8 Dependency Injection

- Dependency injection is a way to supply a new instance of a class with the fully-formed dependencies it requires. Most dependencies are services. Angular uses dependency injection to provide new components with the services they need.

constructor(private service: HeroService) { }

- You must have previously registered a provider of the service class with the injector. A provider is something that can create or return a service, typically the service class itself.

-- You can register providers in modules or in components.
-- In general, add providers to the root module so that the same instance of a service is available everywhere.

providers: [
  BackendService,
  HeroService,
  Logger
],

-- Alternatively, register at a component level in the providers property of the @Component metadata:
-- Registering at a component level means you get a new instance of the service with each new instance of that component.

@Component({
  selector:    'hero-list',
  templateUrl: './hero-list.component.html',
  providers:  [ HeroService ]
})

5 The Root Module (https://angular.io/docs/ts/latest/guide/appmodule.html)

- Tell Angular how to construct and bootstrap the app in the root "AppModule".

import { NgModule }      from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent }  from './app.component';

@NgModule({
  imports:      [ BrowserModule ],
  declarations: [ AppComponent ],
  bootstrap:    [ AppComponent ]
})
export class AppModule { }

- After the import statements, you come to a class adorned with the @NgModule decorator.

-- imports — the BrowserModule that this and every application needs to run in a browser.
-- declarations — the application's lone component, which is also ...
-- bootstrap — the root component that Angular creates and inserts into the index.html host web page.

- Bootstrap in the main.ts

import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule }              from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule);

-- The bootstrapping process sets up the execution environment, digs the root AppComponent out of the module's bootstrap array, creates an instance of the component -- and inserts it within the element tag identified by the component's selector.

6 Displaying Data

- Property binding helps show app data in the UI.
- You can display data by binding controls in an HTML template to properties of an Angular component.

6.1 Showing component properties with interpolation

- The easiest way to display a component property is to bind the property name through interpolation. With interpolation, you put the property name in the view template, enclosed in double curly braces: {{myHero}}.

    import { Component } from '@angular/core';
    @Component({
      selector: 'my-app',
      template: `
        <h1>{{title}}</h1>
        <h2>My favorite hero is: {{myHero}}</h2>
        `
    })
    export class AppComponent {
      title = 'Tour of Heroes';
      myHero = 'Windstorm';
    }

6.2 Showing an array property with *ngFor

export class AppComponent {
  title = 'Tour of Heroes';
  heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];
  myHero = this.heroes[0];
}

template: `
    <h1>{{title}}</h1>
    <h2>My favorite hero is: {{myHero}}</h2>
    <p>Heroes:</p>
    <ul>
      <li *ngFor="let hero of heroes">
        {{ hero }}
      </li>
    </ul>
  `

6.3 Conditional display with NgIf

- The Angular ngIf directive inserts or removes an element based on a truthy/falsy condition. To see it in action, add the following paragraph at the bottom of the template:

<p *ngIf="heroes.length > 3">There are many heroes!</p>

7 User Input

- User input triggers DOM events. We listen to those events with event bindings that funnel updated values back into our components and models.

7.1 Binding to user input events

<button (click)="onClickMe()">Click me!</button>

@Component({
  selector: 'click-me',
  template: `
    <button (click)="onClickMe()">Click me!</button>
    {{clickMessage}}`
})
export class ClickMeComponent {
  clickMessage = '';

  onClickMe() {
    this.clickMessage = 'You are my hero!';
  }
}

7.2 Get user input from the $event object

template: `
  <input (keyup)="onKey($event)">
  <p>{{values}}</p>
`

export class KeyUpComponent_v1 {
  values = '';

  onKey(event: any) { // without type info
    this.values += event.target.value + ' | ';
  }
}

- The properties of an $event object vary depending on the type of DOM event. For example, a mouse event includes different information than a input box editing event.

7.2.3 Type the $event

export class KeyUpComponent_v1 {
  values = '';


  onKey(event: KeyboardEvent) { // with type info
    this.values += (<HTMLInputElement>event.target).value + ' | ';
  }
}

7.3 Get user input from a template reference variable

- These variables provide direct access to an element from within the template. To declare a template reference variable, precede an identifier with a hash (or pound) character (#).

@Component({
  selector: 'loop-back',
  template: `
    <input #box (keyup)="0">
    <p>{{box.value}}</p>
  `
})
export class LoopbackComponent { }

- It's easier to get to the input box with the template reference variable than to go through the $event object. Here's a rewrite of the previous keyup example that uses a template reference variable to get the user's input.

@Component({
  selector: 'key-up2',
  template: `
    <input #box (keyup)="onKey(box.value)">
    <p>{{values}}</p>
  `
})
export class KeyUpComponent_v2 {
  values = '';
  onKey(value: string) {
    this.values += value + ' | ';
  }
}

8 Forms (https://angular.io/docs/ts/latest/guide/forms.html)

- Developing forms requires design skills (which are out of scope for this page), as well as framework support for two-way data binding, change tracking, validation, and error handling, which you'll learn about on this page.

8.1 Form Component

- An Angular form has two parts: an HTML-based template and a component class to handle data and user interactions programmatically.

- Because template-driven forms are in their own module, you need to add the FormsModule to the array of imports for the application module before you can use forms.

- In template driven forms, if you've imported FormsModule (tag import in the module decorator), you don't have to do anything to the <form> tag in order to make use of FormsModule. 

8.2 Two-way data binding with ngModel

<input type="text" class="form-control" id=" name" required [(ngModel)]="model.name" name="name">

<form #heroForm="ngForm"> // Required to display data in two way data binding

- Notice that you also added a name attribute to the <input> tag and set it to "name", which makes sense for the hero's name. Any unique value will do, but using a descriptive name is helpful. Defining a name attribute is a requirement when using [(ngModel)] in combination with a form.

8.3 Show and hide validation error messages

<label for="name">Name</label>
        <input type="text" class="form-control" id="name"
               required
               [(ngModel)]="model.name" name="name"
               #name="ngModel">
        <div [hidden]="name.valid || name.pristine"
             class="alert alert-danger">
          Name is required
        </div>

- To achieve this effect, extend the <input> tag with the following:
-- A template reference variable.
-- The "is required" message in a nearby <div>, which you'll display only if the control is invalid.

8.4 Submit the form with ngSubmit

<form (ngSubmit)="onSubmit()" #heroForm="ngForm">

<button type="submit" class="btn btn-success" [disabled]="!heroForm.form.valid">Submit</button>

9 Dependency Injection

- It's a coding pattern in which a class receives its dependencies from external sources rather than creating them itself.

9.1 Angular Dependency Injection

    import { Injectable } from '@angular/core';
    import { HEROES }     from './mock-heroes';
    @Injectable()
    export class HeroService {
      getHeroes() { return HEROES; }
    }

9.1.2 Configuring the injector

- You don't have to create an Angular injector. Angular creates an application-wide injector for you during the bootstrap process.
- You do have to configure the injector by registering the providers that create the services the application requires
- You can either register a provider within an NgModule or in application components.

9.1.3 Registering providers in an NgModule

@NgModule({
  imports: [
    BrowserModule
  ],
  declarations: [
    AppComponent,
    CarComponent,
    HeroesComponent,
    /* . . . */
  ],
  providers: [
    UserService,
    { provide: APP_CONFIG, useValue: HERO_DI_CONFIG }
  ],
  bootstrap: [ AppComponent ]
})
export class AppModule { }

9.1.4 Registering providers in a component

import { Component }          from '@angular/core';
import { HeroService }        from './hero.service';

@Component({
  selector: 'my-heroes',
  providers: [HeroService],
  template: `
  <h2>Heroes</h2>
  <hero-list></hero-list>
  `
})
export class HeroesComponent { }

9.1.5 When to use NgModule versus an application component

- On the one hand, a provider in an NgModule is registered in the root injector. That means that every provider registered within an NgModule will be accessible in the entire application.
- On the other hand, a provider registered in an application component is available only on that component and all its children.

9.1.6 Preparing a component for injection

export class HeroListComponent {
  heroes: Hero[];
  constructor(heroService: HeroService) {
    this.heroes = heroService.getHeroes();
  }
}

9.1.7 Singleton services

- Dependencies are singletons within the scope of an injector.
- However, Angular DI is a hierarchical injection system, which means that nested injectors can create their own service instances

9.1.8 Why @Injectable()?

- @Injectable() marks a class as available to an injector for instantiation. Generally speaking, an injector reports an error when trying to instantiate a class that is not marked as @Injectable().

9.2 Injector providers

providers: [Logger]

- There are many ways to provide something that looks and behaves like a Logger. The Logger class itself is an obvious and natural provider. But it's not the only way.

9.2.1 The Provider class and provide object literal

- This ...

providers: [Logger]

- is a shorthand of 

[{ provide: Logger, useClass: Logger }]

9.2.2 Alternative class providers

[{ provide: Logger, useClass: BetterLogger }]

9.2.3 Aliased class providers

providers: [ NewLogger,
  // Alias OldLogger w/ reference to NewLogger
  { provide: OldLogger, useExisting: NewLogger}]

9.2.4 Factory providers

- Factory function

let heroServiceFactory = (logger: Logger, userService: UserService) => {
  return new HeroService(logger, userService.user.isAuthorized);
};


- Service provider

export let heroServiceProvider =
  { provide: HeroService,
    useFactory: heroServiceFactory,
    deps: [Logger, UserService]
  };

- Declaring provider

    import { Component }          from '@angular/core';
    import { heroServiceProvider } from './hero.service.provider';
    @Component({
      selector: 'my-heroes',
      template: `
      <h2>Heroes</h2>
      <hero-list></hero-list>
      `,
      providers: [heroServiceProvider]
    })
    export class HeroesComponent { } 

10 - Template Syntax (https://angular.io/docs/ts/latest/guide/template-syntax.html)

10.1 HTML in templates

- HTML is the language of the Angular template. Almost all HTML syntax is valid template syntax. The <script> element is a notable exception; it is forbidden, eliminating the risk of script injection attacks.

10.2 Interpolation ( {﻿{...}} )

- You use interpolation to weave calculated strings into the text between HTML element tags and within attribute assignments.

<h3>
  {{title}}
  <img src="{{heroImageUrl}}" style="height:30px">
</h3>

10.3 Binding syntax

- One-way from data source to view target 

{{expression}}
[target]="expression" bind-target="expression"

- One-way from view target to data source

(target)="statement" on-target="statement"

- Two-way

[(target)]="expression"
bindon-target="expression"

10.4 Binding targets

- Property	
    Element property -> <img [src]="heroImageUrl">
    Component property -> <hero-detail [hero]="currentHero"></hero-detail>
    Directive property -> <div [ngClass]="{special: isSpecial}"></div>

- Event	
    Element event -> <button (click)="onSave()">Save</button>
    Component event -> <hero-detail (deleteRequest)="deleteHero()"></hero-detail>
    Directive event	-> <div (myClick)="clicked=$event" clickable>click me</div>

- Two-way	Event and property	

    <input [(ngModel)]="name">

- Attribute	
    Attribute (the exception) -> <button [attr.aria-label]="help">help</button>

- Class	
    class property -> <div [class.special]="isSpecial">Special</div>

- Style	

    style property -> <button [style.color]="isSpecial ? 'red' : 'green'">

10.5 Custom events with EventEmitter

template: `
<div>
  <img src="{{heroImageUrl}}">
  <span [style.text-decoration]="lineThrough">
    {{prefix}} {{hero?.name}}
  </span>
  <button (click)="delete()">Delete</button>
</div>`

component:
// This component make a request but it can't actually delete a hero.
deleteRequest = new EventEmitter<Hero>();

delete() {
  this.deleteRequest.emit(this.hero);
}

parent component:
<hero-detail (deleteRequest)="deleteHero($event)" [hero]="currentHero"></hero-detail>

10.6 Two-way binding ( [(...)] )

    import { Component, EventEmitter, Input, Output } from '@angular/core';
    @Component({
      selector: 'my-sizer',
      template: `
      <div>
        <button (click)="dec()" title="smaller">-</button>
        <button (click)="inc()" title="bigger">+</button>
        <label [style.font-size.px]="size">FontSize: {{size}}px</label>
      </div>`
    })
    export class SizerComponent {
      @Input()  size: number | string;
      @Output() sizeChange = new EventEmitter<number>();
      dec() { this.resize(-1); }
      inc() { this.resize(+1); }
      resize(delta: number) {
        this.size = Math.min(40, Math.max(8, +this.size + delta));
        this.sizeChange.emit(this.size);
      }
    }

Using it:
<my-sizer [(size)]="fontSizePx"></my-sizer>

Shortcut to... :
<my-sizer [size]="fontSizePx" (sizeChange)="fontSizePx=$event"></my-sizer>


10.7 NgModel - Two-way binding to form elements with [(ngModel)]

<input [(ngModel)]="currentHero.name">

- FormsModule is required to use ngModel

10.8 Built-in structural directives

- NgIf
<hero-detail *ngIf="isActive"></hero-detail>

- NgFor
<div *ngFor="let hero of heroes">{{hero.name}}</div>
<div *ngFor="let hero of heroes; let i=index">{{i + 1}} - {{hero.name}}</div>

- NgSwitch

<div [ngSwitch]="currentHero.emotion">
  <happy-hero    *ngSwitchCase="'happy'"    [hero]="currentHero"></happy-hero>
  <sad-hero      *ngSwitchCase="'sad'"      [hero]="currentHero"></sad-hero>
  <confused-hero *ngSwitchCase="'confused'" [hero]="currentHero"></confused-hero>
  <unknown-hero  *ngSwitchDefault           [hero]="currentHero"></unknown-hero>
</div>

10.9 Template reference variables ( #var )

<input #phone placeholder="phone number">

<!-- lots of other elements -->

<!-- phone refers to the input element; pass its `value` to an event handler -->
<button (click)="callPhone(phone.value)">Call</button>

10.10 Input and output properties ( @Input and @Output )

<img [src]="iconUrl"/>
<button (click)="onSave()">Save</button>

<hero-detail [hero]="currentHero" (deleteRequest)="deleteHero($event)">
</hero-detail>

@Input()  hero: Hero;
@Output() deleteRequest = new EventEmitter<Hero>();

11. Routing & Navigation

11.1 The Basics 

- <base href>
- Most routing applications should add a <base> element to the index.html as the first child in the <head> tag to tell the router how to compose navigation URLs.

<base href="/">

- Router imports

import { RouterModule, Routes } from '@angular/router';

11.2 Router Configuration

const appRoutes: Routes = [
  { path: 'crisis-center', component: CrisisListComponent },
  { path: 'hero/:id',      component: HeroDetailComponent },
  {
    path: 'heroes',
    component: HeroListComponent,
    data: { title: 'Heroes List' }
  },
  { path: '',
    redirectTo: '/heroes',
    pathMatch: 'full'
  },
  { path: '**', component: PageNotFoundComponent }
];

@NgModule({
  imports: [
    RouterModule.forRoot(appRoutes)
    // other imports here
  ],
  ...
})
export class AppModule { }

- The order of the routes in the configuration matters and this is by design. The router uses a first-match wins strategy when matching routes, so more specific routes should be placed above less specific routes

- Router outlet: The component that matches the route will be displayed after the router outlet

<router-outlet></router-outlet>

- Router Links:

<a routerLink="/crisis-center" routerLinkActive="active">Crisis Center</a>

11.3 Route definition with a parameter

- { path: 'hero/:id', component: HeroDetailComponent }
- localhost:3000/hero/15

- Navigate to hero detail imperatively

constructor(
  private router: Router,
  private service: HeroService
) {}

 onSelect(hero: Hero) {
    this.router.navigate(['/hero', hero.id]);
  }


- The router extracts the route parameter (id:15) from the URL and supplies it to the HeroDetailComponent via the ActivatedRoute service.

12. Pipes

- Pipes transform displayed values within a template.

- Built-in pipes
-- Asngular comes with a stock of pipes such as DatePipe, UpperCasePipe, LowerCasePipe, CurrencyPipe, and PercentPipe. They are all available for use in any template.

- Parameterizing a pipe
<p>The hero's birthday is {{ birthday | date:"MM/dd/yy" }} </p>

- Chaining pipes
{{ birthday | date | uppercase}}

- Custom pipes

@Pipe({name: 'exponentialStrength'})
export class ExponentialStrengthPipe implements PipeTransform {
  transform(value: number, exponent: string): number {
    let exp = parseFloat(exponent);
    return Math.pow(value, isNaN(exp) ? 1 : exp);
  }
}

- Filtering elements

<div *ngFor="let hero of (heroes | flyingHeroes)">
  {{hero.name}}
</div>

@Pipe({ name: 'flyingHeroes' })
export class FlyingHeroesPipe implements PipeTransform {
  transform(allHeroes: Flyer[]) {
    return allHeroes.filter(hero => hero.canFly);
  }
}




















